diff --git a/dist/fbt.js b/dist/fbt.js
index 271853b2299af4bb36869c100a9b374de0157571..87bd30760621336790bab2d7de61cd915e6c6d61 100644
--- a/dist/fbt.js
+++ b/dist/fbt.js
@@ -487,7 +487,7 @@ module.exports = FbtQTOverrides;
  * @noformat
  * @nogrep
  */
-var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol["for"] && Symbol["for"]('react.element') || 0xeac7;
+var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol["for"] && Symbol["for"]('react.transitional.element') || 0xeac7;
 var canDefineProperty = false;
 
 if (true) {
diff --git a/lib/FbtReactUtil.js b/lib/FbtReactUtil.js
index becb60e893478abf6b5edf1baa176c69b009d33f..74eb840877e41b28b90c9e7785621f4534f3bb1a 100644
--- a/lib/FbtReactUtil.js
+++ b/lib/FbtReactUtil.js
@@ -16,7 +16,7 @@
  * @noformat
  * @nogrep
  */
-var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol["for"] && Symbol["for"]('react.element') || 0xeac7;
+var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol["for"] && Symbol["for"]('react.transitional.element') || 0xeac7;
 var canDefineProperty = false;
 
 if (process.env.NODE_ENV !== "production") {
diff --git a/lib/substituteTokens.js b/lib/substituteTokens.js
index 144db1d6553417bb9ec67f537c40c0c4cc4f0067..95e6cca7bb4e87598c467420ce81d6a6d29536cf 100644
--- a/lib/substituteTokens.js
+++ b/lib/substituteTokens.js
@@ -66,12 +66,6 @@ function substituteTokens(template, args, errorListener) {
   var objectPieces = [];
   var argNames = [];
   var stringPieces = template.replace(parameterRegexp, function (_match, parameter, punctuation) {
-    if (!hasOwnProperty.call(args, parameter)) {
-      var _errorListener$onMiss;
-
-      errorListener === null || errorListener === void 0 ? void 0 : (_errorListener$onMiss = errorListener.onMissingParameterError) === null || _errorListener$onMiss === void 0 ? void 0 : _errorListener$onMiss.call(errorListener, Object.keys(args), parameter);
-    }
-
     var argument = args[parameter];
 
     if (argument != null && typeof argument === 'object') {
@@ -80,7 +74,7 @@ function substituteTokens(template, args, errorListener) {
 
       return '\x17' + punctuation;
     } else if (argument == null) {
-      return '';
+      return '{' + parameter + '}' + punctuation;
     }
 
     return String(argument) + (0, _IntlPunctuation.dedupeStops)(String(argument), punctuation);
